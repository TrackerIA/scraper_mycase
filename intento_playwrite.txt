¬°Excelente decisi√≥n! **Playwright con contexto persistente (opci√≥n C)** es, hoy por hoy, la forma m√°s robusta para automatizar sitios que requieren **login con 2FA** porque:

* guarda las **cookies y tokens** de tu sesi√≥n en un directorio local,
* permite abrir siempre el **mismo ‚Äúperfil‚Äù** (igual que un perfil de Chrome),
* y evita pelear con puertos de depuraci√≥n o con los l√≠mites de Selenium.

Aqu√≠ tienes una explicaci√≥n **a fondo** de c√≥mo funciona y c√≥mo usarlo en tu arquitectura.

---

## üß© Concepto clave: **Persistent Context**

Playwright normalmente abre un navegador ef√≠mero: cuando cierras la sesi√≥n se pierden cookies, sesi√≥n, etc.
Pero si usas `launch_persistent_context(user_data_dir=...)`, Playwright **crea un perfil permanente en disco**:

* `user_data_dir` = carpeta donde se guardan cookies, cach√©, credenciales‚Ä¶
* cada vez que abras Playwright con **la misma ruta**, reaparecer√°n **todas las cookies y la sesi√≥n**.

En otras palabras:
‚û°Ô∏è **Primera vez**: entras, haces login + 2FA, marcas ‚ÄúRecordar este dispositivo‚Äù.
‚û°Ô∏è **Pr√≥ximas veces**: Playwright abre el navegador ya logueado, sin pedir nada.

---

## üõ†Ô∏è Instalaci√≥n

En tu entorno de proyecto:

```bash
pip install playwright
playwright install chromium
```

* `playwright install chromium` descarga el binario de Chromium/Chrome que Playwright usar√°.

---

## 1Ô∏è‚É£ Sembrar la sesi√≥n (solo una vez)

La primera vez necesitamos **iniciar sesi√≥n manualmente** para que las cookies se guarden en el directorio.

### `scripts/seed_playwright_profile.py`

```python
from playwright.sync_api import sync_playwright

USER_DATA_DIR = r"C:\ChromeProfiles\mycase_pw"

with sync_playwright() as p:
    # Creamos el contexto persistente (perfil permanente)
    context = p.chromium.launch_persistent_context(
        USER_DATA_DIR,
        headless=False,          # Necesitamos ver la ventana
        channel="chrome"         # Opcional: usa Chrome en vez de Chromium
    )
    page = context.new_page()
    page.goto("https://the-mendoza-law-firm.mycase.com/dashboard")

    print("‚û°Ô∏è  Se abri√≥ el navegador.")
    print("üëâ  Inicia sesi√≥n en MyCase, completa el 2FA y marca 'Recordar este dispositivo'.")
    input("Cuando veas el dashboard y hayas terminado, pulsa ENTER aqu√≠ para cerrar.")

    context.close()
```

1. Ejecuta este script:

   ```bash
   python scripts/seed_playwright_profile.py
   ```
2. Haz login + 2FA en la ventana abierta.
3. Marca ‚ÄúRecordar este dispositivo‚Äù.
4. Pulsa ENTER en la consola para cerrar.

Ahora en `C:\ChromeProfiles\mycase_pw` quedan cookies y credenciales permanentes.

---

## 2Ô∏è‚É£ Uso diario en tu arquitectura

Cada vez que quieras scrapear, **no necesitas volver a loguearte**.

### `data_layer/playwright_driver.py`

```python
from playwright.sync_api import sync_playwright

USER_DATA_DIR = r"C:\ChromeProfiles\mycase_pw"

def create_playwright_context():
    """
    Abre el perfil persistente de Playwright (sesi√≥n ya guardada).
    Retorna: playwright, context, page
    """
    p = sync_playwright().start()
    context = p.chromium.launch_persistent_context(
        USER_DATA_DIR,
        headless=False,  # Cambia a True si quieres ocultar la ventana
        channel="chrome" # Opcional
    )
    page = context.new_page()
    return p, context, page
```

### `service_layer/mycase_play_service.py`

```python
from data_layer.playwright_driver import create_playwright_context
from config.settings import DASHBOARD_URL

def open_mycase_with_pw():
    p, context, page = create_playwright_context()
    page.goto(DASHBOARD_URL)
    print("‚úÖ MyCase abierto con sesi√≥n persistente.")
    return p, context, page
```

### `main.py`

```python
from service_layer.mycase_play_service import open_mycase_with_pw

def main():
    p, context, page = open_mycase_with_pw()

    # Aqu√≠ ya puedes scrapear:
    # ejemplo: obtener el t√≠tulo de la p√°gina
    print("T√≠tulo actual:", page.title())

    input("Pulsa ENTER para cerrar...")
    context.close()
    p.stop()

if __name__ == "__main__":
    main()
```

---

## üí° C√≥mo se integra a tu arquitectura en capas

| Capa                     | Funci√≥n                                                                                            |
| ------------------------ | -------------------------------------------------------------------------------------------------- |
| **config/**              | Guarda `USER_DATA_DIR` y `DASHBOARD_URL`.                                                          |
| **data\_layer/**         | `playwright_driver.py` ‚Üí Inicializa el contexto persistente.                                       |
| **service\_layer/**      | `mycase_play_service.py` ‚Üí Abre MyCase y valida la sesi√≥n.                                         |
| **parsing\_layer/**      | Aqu√≠ crear√°s funciones para extraer datos de las p√°ginas Playwright (`page.query_selector`, etc.). |
| **presentation\_layer/** | Guardar CSV, DB, etc.                                                                              |
| **main.py**              | Orquesta todo.                                                                                     |

---

## ‚úÖ Ventajas frente a Selenium/CDP

* **Sin puertos de depuraci√≥n** ni conflictos de opciones.
* **Cookies permanentes** ‚Üí ideal para saltar 2FA despu√©s del primer login.
* API moderna y m√°s estable (puedes usar selectores tipo `page.locator(...)`).
* Soporta **headless** o modo visible.

---

## ‚ö° Siguientes pasos

1. Haz una primera ejecuci√≥n con `seed_playwright_profile.py` para guardar la sesi√≥n.
2. Usa `main.py` a diario.

   * Si alg√∫n d√≠a MyCase expira la sesi√≥n, simplemente vuelve a correr el seed.

---

## Ejemplo de scraping b√°sico

Dentro de tu capa de parsing podr√≠as hacer algo como:

```python
# parsing_layer/mycase_parser.py
def list_case_titles(page):
    titles = [el.inner_text() for el in page.query_selector_all(".case-title")]
    return titles
```

Y en `main.py`:

```python
from parsing_layer.mycase_parser import list_case_titles

def main():
    p, context, page = open_mycase_with_pw()
    print(list_case_titles(page))
    input("ENTER para cerrar...")
    context.close()
    p.stop()
```

---

### üóùÔ∏è En resumen

* **Primera vez**: ejecuta `seed_playwright_profile.py`, haz login + 2FA.
* **Despu√©s**: cada scraping abre **el mismo perfil persistente**, y MyCase ya estar√° logueado.
* Playwright se encarga de mantener cookies/tokens sin que tengas que revalidar.
